//! Client packets have the following syntax
//! [OPCODE] 2 Bytes
//! [CLIENT] 1 Byte - Always 0x6F
//! [CHECKSUM] 2 Bytes - Checksum should be == bitwise not opcode

use krypt::game::{decrypt, decrypt_client_opcode};

use super::server as s;
use crate::consume_le_bytes;
use crate::game::data::ActionType;
use crate::game::engine::{Coord, Direction, MoveType};
use crate::game::session::Account;
use crate::game::{ClientUpdate, Deserialise};
use crossbeam_channel::Sender;

macro_rules! define_messages {
    ($(($message_const_name:ident, $message:ident, $opcode:expr)),* $(,)?) => {
        $(
            const $message_const_name: u16 = $opcode;
        )*

        #[derive(Debug, Clone)]
        #[repr(u16)]
        pub enum Message {
            $(
                $message($message),
            )*
        }

        impl Message {
            pub fn deserialise(
                mut buf: &mut [u8],
                mut key: &mut [u8; 8],
            ) -> Option<Self> {
                decrypt(&mut key, buf);

                let mut len = 0;

                let opcode = consume_le_bytes!(len, buf, u16);
                // Skip Server bytes
                len += 1;

                let checksum = consume_le_bytes!(len, buf, u16);

                if checksum != !opcode {
                    panic!("Packet Checksum Failed, {opcode:02X}-{checksum:02X}");
                }
                let opcode = decrypt_client_opcode(opcode);

                buf = &mut buf[len..];
                match opcode {
                    $(
                        $message_const_name => Some(Message::$message(<$message>::deserialise(buf))),
                    )*
                    _ => {
                        println!("WARNING: Client Opcode {opcode:02X} not implemented");
                        println!("C RAW: {:02X?}", buf);
                        None
                    }
                }
            }

            pub fn handle(self, tx: &Sender<ClientUpdate>, session: &mut Account) -> Vec<s::Message> {
                match self {
                    $(
                        Self::$message(message) => message.handle(&tx, session),
                    )*
                }
            }
        }
    };
}

define_messages!(
    (VERSION, Version, 0x00),
    (ASK_QUIT, AskQuit, 0x03),
    (ENTER_WORLD, EnterWorld, 0x08),
    (LEVEL_READY, LevelReady, 0x09),
    (READY_TO_QUIT, ReadyToQuit, 0x04),
    (SAVE_CLIENT_SETTINGS, SaveClientSettings, 0x0A),
    (SYNC_TIME, SyncTime, 0x12),
    (CHANGE_TARGET, ChangeTarget, 0x1F),
    (ATTACK, Attack, 0x20),
    (USE_SKILL, UseSkill, 0x21),
    (USE_EQUIPMENT_ITEM, UseEquipmentItem, 0x26),
    (ACTION, Action, 0x2B),
    (ALIVE, Alive, 0x2C),
    (MOVE_NEW, MoveNew, 0x30),
    (ASK_LOG, AskLog, 0x3E),
    (QUERY_BUDDY, QueryBuddy, 0x6E),
    (CHARACTER_LIST, CharacterList, 0x96),
    (LOOT, Loot, 0x9A),
    (LOOT_ITEM, LootItem, 0x9B),
    (RECIPE_LIST, RecipeList, 0x9E),
    (RECONNECT_AUTH, ReconnectAuth, 0xB8),
    (INSTANCE_DUNGEON_COOLTIMES, InstanceDungeonCooltimes, 0xC1),
    (REQUEST_SERIAL_KILLER_LIST, RequestSerialKillerList, 0xC5),
    (_D8, _00D8, 0xD8),
    (CUR_STATUS, CurStatus, 0xAA),
    (QUERY_BLOCK, QueryBlock, 0xA8),
    (SIGN_CLIENT, SignClient, 0xAE),
    (SA_ACCOUNT_ITEM_QUERY, SaAccountItemQuery, 0xBB),
    (ROUTE_INFO, RouteInfo, 0xBE),
    (SECOND_PASSWORD, SecondPassword, 0xD2),
    (READY_ENTER_WORLD_ACK, ReadyEnterWorldAck, 0xE2),
    (HQ_LOGIN, HqLogin, 0xF0),
);

#[derive(Debug, Clone)]
pub struct SyncTime {
    /// On a SyncTime Request this is current session time
    /// On a SyncTime Acknowledgement this is the server uptime
    ticks: u32,
    /// 0 means request
    /// 1 means ack
    ty: u8,
    unknown: [u8; 4],
    /// The
    sequence: u32,
}
impl SyncTime {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        // ty is set to 1 when its an ack
        if self.ty == 0 {
            vec![s::Message::SyncTime(s::SyncTime::new(self.ticks))]
        } else {
            vec![]
        }
    }
}
impl Deserialise for SyncTime {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self {
            ticks: u32::from_le_bytes([buf[0], buf[1], buf[2], buf[3]]),
            ty: buf[4],
            unknown: [buf[5], buf[6], buf[7], buf[8]],
            sequence: u32::from_le_bytes([buf[9], buf[10], buf[11], buf[12]]),
        }
    }
}

// TODO: Get this from external state
#[derive(Debug, Clone)]
pub struct CharacterList;
impl CharacterList {
    pub fn handle(
        self,
        tx: &Sender<ClientUpdate>,
        session: &mut Account,
    ) -> Vec<s::Message> {
        tx.send(session.send(Message::CharacterList(self))).unwrap();
        vec![s::Message::BuilderLevel(s::BuilderLevel::new())]
    }
}
impl Deserialise for CharacterList {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}

/// Client sends a packet chosing which character they wish to log in as
#[derive(Debug, Clone)]
pub struct EnterWorld {
    character_id: u32,
}
impl Deserialise for EnterWorld {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        let mut _ptr = 0;
        Self {
            character_id: consume_le_bytes!(_ptr, buf, u32),
        }
    }
}

impl EnterWorld {
    /// We prompt for a PIN if [Account] pin_enabled is true
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        session: &mut Account,
    ) -> Vec<s::Message> {
        session.set_character_id(self.character_id);

        if session.pin_enabled() {
            vec![s::Message::SecondPassword(s::SecondPassword::request())]
        } else {
            vec![s::Message::EnterWorldCheck(s::EnterWorldCheck::new())]
        }
    }
}

#[derive(Debug, Clone)]
pub struct SecondPassword;

impl SecondPassword {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![
            s::Message::SecondPassword(s::SecondPassword::response()),
            s::Message::EnterWorldCheck(s::EnterWorldCheck::new()),
        ]
    }
}
impl Deserialise for SecondPassword {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}

#[derive(Debug, Clone)]
pub struct SaAccountItemQuery;

impl SaAccountItemQuery {
    /// The client will hang unless we respond to this query
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![s::Message::SaAccountItemNoti(s::SaAccountItemNoti::new())]
    }
}
impl Deserialise for SaAccountItemQuery {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}

/// Contains information from server end
#[derive(Debug, Clone)]
pub struct HqLogin {
    id: u32,
    key: u32,
    authn_token: String,
}
impl HqLogin {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        session: &mut Account,
    ) -> Vec<s::Message> {
        session.auth_server.id = self.id;
        session.auth_server.key = self.key;
        vec![
            s::Message::ReplyNpLoginGamesvr(s::ReplyNpLoginGamesvr::new()),
            s::Message::NpShopGoodsCount(s::NpShopGoodsCount::new()),
            s::Message::ReadyEnterWorld(s::ReadyEnterWorld::new()),
            s::Message::L2AuthLoginCheck(s::L2AuthLoginCheck::new()),
            s::Message::ReplyNpAuthToken(s::ReplyNpAuthToken::new()),
        ]
    }
}

impl Deserialise for HqLogin {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        let mut len = 0;

        let id = consume_le_bytes!(len, buf, u32);
        let key = consume_le_bytes!(len, buf, u32);

        // unknown
        len += 8;

        let authn_token = std::str::from_utf8(&buf[len..]).unwrap().into();
        Self {
            id,
            key,
            authn_token,
        }
    }
}

/// Reports the client versions, OS and game related
/// 00F2
/// [Aion major version] C0 00
/// [Unknown] 28 00
/// [ANSI Encoding] E4 04 00 00
/// [OS Major Version] 06 00 00 00
/// [OS Minor Version] 02 00 00 00
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub struct Version {
    aion_version: u16,
    unknown: [u8; 2],
    ansi_encoding: u32,
    os_major_version: u32,
    os_minor_version: u32,
}
impl Version {
    pub fn handle(
        self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![
            s::Message::VersionCheck(s::VersionCheck::new()),
            s::Message::ServerEnv(s::ServerEnv::new()),
        ]
    }
}

impl Deserialise for Version {
    fn deserialise(mut buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        let aion_version = u16::from_le_bytes(buf[..2].try_into().unwrap());
        buf = &buf[2..];

        let unknown = buf[..2].try_into().unwrap();
        buf = &buf[2..];

        let ansi_encoding = u32::from_le_bytes(buf[..4].try_into().unwrap());
        buf = &buf[4..];

        let os_major_version = u32::from_le_bytes(buf[..4].try_into().unwrap());
        buf = &buf[4..];

        let os_minor_version = u32::from_le_bytes(buf[..4].try_into().unwrap());

        Self {
            aion_version,
            unknown,
            ansi_encoding,
            os_major_version,
            os_minor_version,
        }
    }
}

#[derive(Debug, Clone)]
pub struct CurStatus;

impl CurStatus {
    pub fn handle(
        self,
        tx: &Sender<ClientUpdate>,
        session: &mut Account,
    ) -> Vec<s::Message> {
        let change_channel = [0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00];

        let ui = [
            0x76, 0x7C, 0x00, 0x00, 0x78, 0x9C, 0xCD, 0x5D, 0x4B, 0x73, 0x23,
            0xB7, 0x11, 0x46, 0xAE, 0xA9, 0xCA, 0x7F, 0xD8, 0xF2, 0xDD, 0x31,
            0xE7, 0x3D, 0x53, 0x95, 0xC8, 0x65, 0xEF, 0x7A, 0x73, 0xCB, 0x25,
            0xC9, 0x59, 0x45, 0xAD, 0xA8, 0x47, 0x2D, 0x29, 0xC9, 0x22, 0xB5,
            0xB2, 0xFC, 0x1B, 0xF3, 0xA3, 0x02, 0x74, 0x4F, 0xE3, 0x35, 0x68,
            0xA0, 0x47, 0xF4, 0x21, 0xC5, 0xDA, 0xE5, 0x68, 0xF0, 0xF5, 0xD7,
            0x40, 0xA3, 0xF1, 0xEE, 0x19, 0xFE, 0x57, 0xFD, 0x49, 0xFD, 0x4D,
            0xFD, 0xA8, 0x7E, 0x53, 0x07, 0xB5, 0x57, 0x1F, 0xD4, 0x37, 0xB5,
            0x53, 0xCF, 0xEA, 0xA8, 0xEE, 0xD5, 0xA3, 0x7A, 0x50, 0x7F, 0x57,
            0xDF, 0xA9, 0x4A, 0xFD, 0x55, 0x6D, 0xF4, 0xF7, 0x07, 0x9D, 0xF2,
            0xA0, 0xBE, 0xE8, 0xFB, 0xD7, 0x3A, 0xF5, 0x41, 0xDD, 0x42, 0xEA,
            0x7F, 0xD4, 0xBF, 0xD5, 0x67, 0xF5, 0xBD, 0x46, 0xF5, 0xFA, 0xAF,
            0x1F, 0xD5, 0x85, 0xFA, 0x8B, 0xFA, 0xB3, 0x66, 0x7C, 0x54, 0x4F,
            0xEA, 0x34, 0xB3, 0x1C, 0xED, 0xDD, 0xAD, 0xD6, 0x71, 0x02, 0x0D,
            0x97, 0xC0, 0x64, 0xD2, 0x1E, 0xF5, 0xBD, 0x9D, 0xFE, 0xFB, 0x49,
            0x5F, 0x19, 0x64, 0xA3, 0xB9, 0x2A, 0xFD, 0xFF, 0x46, 0xD5, 0x9A,
            0x73, 0xD0, 0x52, 0x3F, 0x88, 0xE4, 0x50, 0xC3, 0x95, 0xC6, 0x5E,
            0xEB, 0xBC, 0x99, 0x94, 0xA3, 0xBA, 0xD3, 0x69, 0xAF, 0xFA, 0xCA,
            0xCF, 0xCD, 0x85, 0x66, 0x37, 0x9C, 0x12, 0x24, 0x71, 0x1E, 0x75,
            0xCA, 0xAD, 0xC6, 0xBF, 0xCC, 0xF8, 0x07, 0x7D, 0x75, 0xD0, 0xE9,
            0x27, 0x9D, 0xA3, 0x17, 0x7D, 0x07, 0xF9, 0x38, 0x94, 0xCF, 0x72,
            0x00, 0xDB, 0xDD, 0x27, 0x65, 0x5D, 0x9A, 0x2F, 0xE1, 0xF2, 0xF6,
            0x45, 0x5F, 0x6D, 0xB5, 0xD4, 0x85, 0xBA, 0x01, 0x8B, 0x1C, 0x03,
            0xE9, 0x14, 0x2E, 0xCD, 0x73, 0xAD, 0x53, 0x0F, 0xFA, 0x9F, 0xC9,
            0x65, 0x2A, 0x1F, 0x1C, 0xB2, 0xCC, 0x96, 0x2F, 0x5F, 0x59, 0xC6,
            0xD7, 0x60, 0xE4, 0xB7, 0x50, 0xD3, 0x4F, 0x50, 0x1A, 0xF4, 0xBE,
            0x37, 0x8D, 0xEA, 0xB5, 0x6F, 0x38, 0x56, 0x1E, 0x47, 0x6C, 0x2F,
            0xDA, 0x5E, 0x37, 0x1A, 0x69, 0x6C, 0x76, 0xAF, 0x75, 0x3E, 0x80,
            0xD4, 0x9B, 0xC6, 0x9B, 0x52, 0x11, 0x57, 0x1E, 0x15, 0x73, 0x1D,
            0x75, 0xDA, 0x56, 0xFF, 0x7B, 0x11, 0xE7, 0x75, 0xAD, 0x24, 0x6A,
            0xFC, 0x02, 0x96, 0xBA, 0x04, 0x6B, 0xFD, 0x06, 0x96, 0xBB, 0x07,
            0x06, 0xCA, 0x37, 0x9F, 0x1E, 0xCA, 0x3F, 0x81, 0x96, 0x4B, 0xB0,
            0x34, 0xB6, 0xF1, 0x93, 0xFE, 0xCB, 0xD4, 0xC7, 0xB3, 0xBE, 0xF7,
            0x3B, 0xF8, 0xBB, 0x29, 0x79, 0xEC, 0x5B, 0xEB, 0xE5, 0x25, 0x7A,
            0xE9, 0xEA, 0x1E, 0x70, 0x6B, 0xB5, 0x2E, 0xA5, 0x43, 0x9D, 0xCF,
            0x3A, 0x37, 0x27, 0xB0, 0xB4, 0xA9, 0xBB, 0x9D, 0xB6, 0xC9, 0x85,
            0xEE, 0x4B, 0x7C, 0xDE, 0x14, 0x82, 0x38, 0xEE, 0xF4, 0xFD, 0x9D,
            0x46, 0x3D, 0xDA, 0x7E, 0xC0, 0x94, 0x13, 0xAD, 0x6A, 0x4A, 0xFB,
            0xA6, 0x2D, 0x4F, 0x7D, 0x88, 0x14, 0x2D, 0xE7, 0xAE, 0xBC, 0xBC,
            0xCA, 0xD0, 0x72, 0xEE, 0x1A, 0x7A, 0x57, 0x29, 0x77, 0xBD, 0x8A,
            0xBB, 0xD1, 0xE8, 0x56, 0xCC, 0xDD, 0xAC, 0xE2, 0x6E, 0x35, 0xBA,
            0x13, 0x73, 0xB7, 0xAB, 0xB8, 0x3B, 0x68, 0xA3, 0x52, 0xEE, 0x6E,
            0x15, 0x77, 0xAF, 0xD1, 0x83, 0x98, 0xBB, 0x5F, 0xC5, 0x3D, 0x68,
            0xF4, 0x28, 0xE6, 0x1E, 0x56, 0x71, 0x8F, 0x1A, 0x3D, 0x89, 0xB9,
            0xC7, 0x55, 0xDC, 0x13, 0xB4, 0x9D, 0x8D, 0x98, 0x7D, 0x8A, 0xD8,
            0xF7, 0xD0, 0x17, 0xEC, 0xE6, 0x79, 0xC0, 0x1E, 0x50, 0x97, 0xD0,
            0xC6, 0xBE, 0x0F, 0xDA, 0x24, 0x8F, 0x2B, 0xB3, 0x55, 0x33, 0xDB,
            0xA4, 0xED, 0x66, 0x3E, 0x75, 0xE0, 0x21, 0xBC, 0x8C, 0x84, 0x19,
            0x73, 0xDA, 0x69, 0xAB, 0x4D, 0xFA, 0xD3, 0x69, 0xEE, 0x72, 0xAE,
            0x2B, 0x71, 0xBE, 0x31, 0xE7, 0x83, 0x66, 0x1F, 0x75, 0x1B, 0xEB,
            0xB4, 0x06, 0x09, 0xBB, 0x2C, 0xEF, 0x35, 0x70, 0xB7, 0xFA, 0xDB,
            0xE4, 0xBD, 0x85, 0x79, 0x5A, 0x89, 0x3B, 0xEE, 0x43, 0xD2, 0xA8,
            0x66, 0xB6, 0x77, 0x0F, 0xB6, 0xDE, 0xE8, 0xEF, 0x56, 0xC0, 0x1D,
            0xF7, 0x21, 0x69, 0x54, 0xEB, 0x71, 0x9B, 0x3C, 0xF7, 0x3A, 0xF7,
            0x65, 0xEE, 0xB8, 0x0F, 0x49, 0xA3, 0x3A, 0xE0, 0x6E, 0x66, 0x8B,
            0xF4, 0xFA, 0xEF, 0x32, 0x73, 0xDC, 0x83, 0xA4, 0x51, 0xFD, 0x3B,
            0xEA, 0x31, 0xEE, 0x3F, 0xD2, 0xA8, 0xC1, 0xAB, 0xC5, 0x51, 0xFF,
            0xDF, 0x05, 0xBD, 0x36, 0x2F, 0x53, 0x66, 0x1E, 0x67, 0x4B, 0x37,
            0x90, 0xEF, 0x41, 0xD7, 0xE3, 0x28, 0x68, 0x37, 0x71, 0xEF, 0x91,
            0x46, 0x4D, 0xB6, 0x45, 0x9A, 0x3C, 0xCB, 0x5A, 0xE4, 0xB2, 0xE7,
            0x78, 0xD4, 0x57, 0x5F, 0x13, 0x73, 0x8D, 0x30, 0xD5, 0x97, 0x39,
            0x68, 0xD4, 0x6D, 0xC0, 0x7B, 0xA1, 0x57, 0x3B, 0xFE, 0xE7, 0x93,
            0xFE, 0xFC, 0xA4, 0x3F, 0x9F, 0xF4, 0x75, 0x0D, 0x3E, 0x50, 0xEB,
            0xCF, 0x4F, 0xBA, 0xF4, 0x26, 0xD5, 0x7C, 0xFB, 0xD7, 0x1B, 0x9D,
            0xFE, 0x51, 0x97, 0xE1, 0x93, 0x2E, 0xC3, 0xA4, 0xAF, 0x7E, 0xD1,
            0xDF, 0x9F, 0xF4, 0xB7, 0x29, 0xD7, 0x2F, 0xFA, 0xCA, 0xB4, 0x45,
            0x83, 0xFD, 0x59, 0x7F, 0xFF, 0x7C, 0xE6, 0xF5, 0x47, 0x5D, 0xB3,
            0x9F, 0xBC, 0x9C, 0xFA, 0x18, 0x93, 0x9B, 0x8F, 0x5A, 0x37, 0x5E,
            0xD7, 0x90, 0x33, 0xBC, 0x1E, 0x74, 0x19, 0xA6, 0xC5, 0xF5, 0xA8,
            0xF3, 0xFD, 0xD9, 0xDE, 0xFD, 0x6C, 0x25, 0xFD, 0xEB, 0xCD, 0xFC,
            0xA1, 0xEB, 0xCF, 0xC9, 0x8F, 0xCF, 0xFF, 0xC7, 0x7C, 0xE2, 0x3C,
            0xFC, 0x91, 0xDC, 0xFF, 0x7F, 0x1F, 0xE3, 0x2F, 0x66, 0x65, 0xFC,
            0xD1, 0x96, 0x77, 0x13, 0xF9, 0x98, 0x7F, 0xED, 0x63, 0x42, 0x1E,
            0xE7, 0xB7, 0x29, 0x9B, 0xF9, 0xF7, 0xF0, 0x7A, 0x80, 0x3E, 0xBF,
            0x02, 0x8F, 0x0A, 0xF3, 0xB0, 0xC6, 0x27, 0x07, 0xED, 0x47, 0x3F,
            0x69, 0x6F, 0xFA, 0xAC, 0xB9, 0x7C, 0x4E, 0xD7, 0x0E, 0x53, 0x2D,
            0xCE, 0x6F, 0x91, 0x66, 0xED, 0x74, 0xA5, 0x70, 0x95, 0xF6, 0x04,
            0xEB, 0x5C, 0x1C, 0xD5, 0xBB, 0x60, 0x4E, 0xC1, 0xA1, 0x4A, 0x4C,
            0x95, 0x88, 0x29, 0x1E, 0x2F, 0x53, 0x98, 0x5A, 0xC4, 0x14, 0x8F,
            0x8F, 0x29, 0x4C, 0x23, 0x62, 0x8A, 0x47, 0xC3, 0x14, 0xA6, 0x15,
            0x31, 0xC5, 0x63, 0x5F, 0x0A, 0xD3, 0x89, 0x98, 0xE2, 0xB1, 0x2E,
            0x85, 0x31, 0xD7, 0x7B, 0x98, 0x83, 0x77, 0x05, 0x36, 0x42, 0xA6,
            0x18, 0xC9, 0x6B, 0x96, 0xF3, 0xC0, 0x14, 0x22, 0xC7, 0x80, 0x1E,
            0xD0, 0x67, 0x18, 0xB8, 0xDA, 0xA7, 0xF4, 0x3A, 0x5A, 0xC1, 0xA5,
            0xD2, 0x73, 0xF2, 0xF1, 0x4A, 0x2A, 0x95, 0x9E, 0x93, 0x6F, 0xBD,
            0xBD, 0x01, 0x2E, 0x3D, 0x27, 0xDF, 0x15, 0xE4, 0xB9, 0x5A, 0xA5,
            0x74, 0x33, 0x7F, 0xBF, 0x9C, 0xD7, 0xC8, 0x75, 0xB0, 0xFE, 0xE1,
            0x91, 0x65, 0xBE, 0x4A, 0xCC, 0x57, 0xAA, 0x1F, 0x44, 0xD5, 0x85,
            0x52, 0x3A, 0x54, 0x99, 0xAB, 0x81, 0xF5, 0x52, 0x39, 0x67, 0xA5,
            0x9A, 0x43, 0x54, 0xA9, 0xFE, 0x1C, 0xAA, 0xCC, 0x55, 0xAA, 0x4B,
            0x87, 0x2A, 0x73, 0xF5, 0x22, 0xAE, 0x78, 0x16, 0x1A, 0xA3, 0x4C,
            0x9F, 0x4E, 0xED, 0x74, 0x82, 0xB1, 0x65, 0x80, 0x79, 0xDD, 0x34,
            0xCF, 0x45, 0x7B, 0x18, 0x23, 0x5A, 0xFD, 0x2F, 0x67, 0x4F, 0xC7,
            0x52, 0xD6, 0x55, 0xFD, 0x21, 0xBA, 0x4A, 0x5E, 0x85, 0xA8, 0x1A,
            0x3C, 0xC1, 0xAC, 0xE9, 0x70, 0xAD, 0xD1, 0xC2, 0xFC, 0x7D, 0x80,
            0x99, 0xF0, 0xA8, 0xFF, 0xDA, 0xE8, 0x7F, 0x03, 0xA4, 0x94, 0xF4,
            0x95, 0x3C, 0x0F, 0x51, 0xCD, 0x5C, 0x36, 0x33, 0xE7, 0x6C, 0x40,
            0x93, 0x99, 0xCB, 0xE1, 0x2A, 0xA7, 0x03, 0x5D, 0x03, 0x94, 0xAE,
            0xCA, 0xF6, 0x48, 0x8E, 0xAB, 0xAC, 0xB1, 0xE4, 0x9D, 0x0E, 0x55,
            0xE6, 0x2A, 0x79, 0xA7, 0x43, 0x95, 0xB9, 0x4A, 0xDE, 0xE9, 0x50,
            0x29, 0xAE, 0x07, 0xD8, 0x17, 0xDC, 0x41, 0x3D, 0x7F, 0xD0, 0x69,
            0xD7, 0xB0, 0x43, 0xBB, 0x85, 0x13, 0x0E, 0xDA, 0xC7, 0xFE, 0x4E,
            0xCB, 0xFE, 0x13, 0x66, 0x24, 0x07, 0x18, 0x8B, 0x96, 0xBA, 0x7C,
            0x96, 0x92, 0x9E, 0x3A, 0xAB, 0xE7, 0xA3, 0xD6, 0x73, 0x80, 0x13,
            0x8A, 0x53, 0x56, 0x0F, 0xE7, 0x25, 0x0E, 0xD1, 0x64, 0xF5, 0xFC,
            0x03, 0x76, 0x42, 0x5F, 0xF4, 0x18, 0x9B, 0xD3, 0xC2, 0x79, 0x86,
            0x43, 0xB4, 0x59, 0x2D, 0x39, 0x6E, 0xCE, 0x53, 0x1C, 0xA2, 0x7B,
            0x37, 0x37, 0xE7, 0x39, 0x0E, 0xD1, 0xBF, 0x9B, 0x9B, 0xF3, 0x24,
            0x77, 0xC6, 0x61, 0x7C, 0xC0, 0x3F, 0x03, 0xC9, 0xE1, 0xF2, 0x4C,
            0xB5, 0x90, 0x89, 0xF3, 0x06, 0x87, 0x68, 0x84, 0x4C, 0x5C, 0x8D,
            0x3B, 0x44, 0xCB, 0xAC, 0xA3, 0xD3, 0xC8, 0x3C, 0x57, 0x27, 0xE6,
            0xE2, 0x6A, 0xD4, 0x21, 0x7A, 0x31, 0x17, 0x57, 0x83, 0x66, 0x27,
            0xF2, 0x30, 0x9F, 0x0A, 0x9E, 0xA0, 0xBE, 0x9F, 0x14, 0xCD, 0x67,
            0x96, 0x7C, 0x3C, 0x5A, 0xCE, 0x5D, 0xAD, 0xE2, 0xE6, 0xFC, 0x25,
            0x8D, 0xAE, 0x57, 0x71, 0x73, 0x1E, 0x94, 0x46, 0x37, 0xAB, 0xB8,
            0x39, 0x9F, 0x4A, 0xA3, 0xDB, 0x55, 0xDC, 0x9C, 0x8F, 0xA5, 0xD1,
            0xDD, 0x2A, 0x6E, 0xCE, 0xE7, 0xD2, 0xE8, 0x7E, 0x15, 0x37, 0xEF,
            0x83, 0x78, 0xEE, 0xE8, 0xF6, 0xA2, 0x53, 0x8C, 0x3E, 0x26, 0xCF,
            0x52, 0x0B, 0x58, 0xF8, 0xBA, 0x27, 0x44, 0x23, 0x60, 0xE1, 0x6B,
            0x99, 0x10, 0xAD, 0x80, 0x85, 0xAF, 0x4F, 0x42, 0x74, 0x02, 0x96,
            0xB8, 0xE6, 0x5E, 0x61, 0x9F, 0xF0, 0x7A, 0x6E, 0xFF, 0xE6, 0xAC,
            0xF5, 0x8B, 0x3A, 0xCD, 0xAD, 0xD5, 0x9F, 0x3B, 0xE4, 0x70, 0x12,
            0xBE, 0x4A, 0xC8, 0x17, 0xD7, 0x1B, 0x87, 0x8B, 0xD7, 0x2A, 0x39,
            0x9C, 0x84, 0xAF, 0x11, 0xF2, 0xC5, 0x75, 0xC9, 0xE1, 0xE2, 0x39,
            0x61, 0x0E, 0x27, 0xE1, 0x8B, 0xE7, 0x85, 0x39, 0x9C, 0x84, 0x2F,
            0x9E, 0x1B, 0xE6, 0x70, 0x3C, 0xDF, 0x11, 0xCE, 0xB9, 0x4D, 0x2C,
            0xC0, 0x38, 0xEF, 0xF5, 0x9B, 0x99, 0x76, 0xCB, 0xF2, 0x3A, 0xBC,
            0xE3, 0xDC, 0x42, 0xDC, 0x0C, 0xEE, 0x54, 0x9B, 0xBF, 0xEE, 0xE1,
            0xC4, 0xEB, 0xA8, 0xBE, 0xEA, 0x2B, 0xDC, 0xDD, 0x88, 0x47, 0xE7,
            0xB2, 0x44, 0x8A, 0xDD, 0xC4, 0x16, 0x98, 0xD6, 0xB0, 0x9F, 0x7B,
            0x1C, 0x09, 0x3F, 0x2F, 0xE3, 0x6B, 0x30, 0x76, 0xBA, 0x81, 0x93,
            0xBA, 0x53, 0x50, 0xC6, 0x8D, 0xC7, 0xC8, 0x61, 0x62, 0x1E, 0x17,
            0xF1, 0xB3, 0x81, 0x15, 0x53, 0x0F, 0x3B, 0x2F, 0x31, 0x53, 0x18,
            0xDF, 0xF3, 0x05, 0xCE, 0xEF, 0xCB, 0xF1, 0x16, 0x25, 0x1C, 0xB1,
            0x3D, 0x42, 0x4F, 0x8C, 0x69, 0x06, 0xFF, 0x08, 0xFB, 0x8E, 0xA6,
            0xB7, 0x7E, 0x5A, 0x58, 0x2B, 0x8F, 0x25, 0xC6, 0xA3, 0xED, 0x8B,
            0x9C, 0x55, 0xFC, 0x7B, 0x21, 0xAE, 0x5C, 0x0E, 0x49, 0x94, 0xC8,
            0xB5, 0xCE, 0x87, 0x59, 0xE5, 0x98, 0xD8, 0xA3, 0x13, 0xAC, 0x74,
            0x5C, 0x14, 0x4B, 0x3C, 0x1F, 0xCA, 0x63, 0x89, 0xEF, 0x05, 0xEE,
            0x1A, 0xAF, 0xDB, 0x43, 0x9C, 0xC5, 0x57, 0x75, 0x09, 0xE7, 0xB4,
            0xD7, 0x50, 0x93, 0x31, 0x63, 0x1E, 0x8D, 0x9C, 0x3B, 0xF5, 0xAB,
            0xC6, 0x19, 0x5B, 0x1D, 0x20, 0xFF, 0x27, 0xEB, 0xD3, 0xE4, 0x81,
            0x9B, 0xEC, 0x6C, 0xFC, 0x5F, 0xFA, 0xFB, 0xA4, 0x11, 0xD8, 0xE7,
            0x4B, 0xD8, 0xE4, 0x9A, 0xF3, 0xAB, 0x3E, 0xD2, 0x5C, 0x0B, 0x35,
            0x57, 0x2B, 0x34, 0xE7, 0xD7, 0x81, 0xA4, 0xB9, 0x11, 0x6A, 0xAE,
            0x57, 0x68, 0xCE, 0xAF, 0x0C, 0x49, 0x73, 0x2B, 0xD4, 0xDC, 0xAC,
            0xD0, 0x9C, 0x5F, 0x2D, 0x92, 0xE6, 0x4E, 0xA8, 0xB9, 0x5D, 0xA1,
            0x39, 0xBF, 0x96, 0x24, 0xCD, 0xBD, 0x50, 0x73, 0xB7, 0x42, 0x73,
            0x7E, 0xA5, 0x49, 0x9A, 0x07, 0xA1, 0xE6, 0x7E, 0x85, 0xE6, 0x41,
            0xA4, 0x79, 0x14, 0x6A, 0x76, 0x67, 0xC1, 0xA6, 0x0F, 0x38, 0xCE,
            0x88, 0x6D, 0x10, 0x35, 0x19, 0xF6, 0x0E, 0x3C, 0xCE, 0xF1, 0x7C,
            0x53, 0x18, 0x47, 0x76, 0x02, 0x1D, 0x38, 0x22, 0xDF, 0xCF, 0x91,
            0x77, 0xC4, 0x91, 0xC3, 0x10, 0xD3, 0xBD, 0x17, 0x27, 0xFA, 0x0A,
            0xF8, 0xEB, 0x44, 0x7E, 0xD2, 0x28, 0xE2, 0x30, 0xE7, 0xC0, 0x66,
            0x2C, 0x7C, 0x84, 0xFE, 0x91, 0xCA, 0x6F, 0xAE, 0xCC, 0xD8, 0xFB,
            0x04, 0x77, 0x97, 0x9C, 0x32, 0x29, 0xA7, 0xE3, 0x59, 0x23, 0x4C,
            0x39, 0x6E, 0xA1, 0x2E, 0x4C, 0xD4, 0x69, 0xE5, 0x8D, 0x75, 0x3D,
            0x9C, 0xD0, 0x9B, 0x5D, 0xCA, 0x66, 0x6E, 0x07, 0x65, 0x99, 0x1C,
            0x77, 0xFD, 0x0E, 0xEE, 0x5A, 0xC8, 0xDD, 0xBC, 0x83, 0xBB, 0x11,
            0x72, 0xB7, 0xEF, 0xE0, 0x6E, 0xB3, 0xDC, 0x6E, 0xFD, 0x7F, 0xA3,
            0xEB, 0xCF, 0x44, 0xA0, 0x1E, 0xED, 0x8A, 0xAD, 0x8C, 0x43, 0xBE,
            0x5B, 0x98, 0x5B, 0x5C, 0x41, 0x4B, 0xD9, 0xC3, 0x18, 0xF7, 0xAC,
            0xDC, 0xBA, 0x83, 0x46, 0xFD, 0x12, 0x8A, 0xB8, 0x28, 0xDD, 0xF8,
            0x8C, 0x19, 0xE5, 0x6F, 0xE6, 0xF9, 0x53, 0xE8, 0xF1, 0xA5, 0x7D,
            0x2A, 0x29, 0x4F, 0x4A, 0x6F, 0x3E, 0x4E, 0x5A, 0x82, 0x5C, 0x72,
            0x86, 0x33, 0xA0, 0x54, 0x4A, 0x4A, 0xA6, 0x34, 0x1B, 0x92, 0xA1,
            0x91, 0xF9, 0x0E, 0x66, 0x67, 0xD7, 0xD0, 0x57, 0x6C, 0xC1, 0x76,
            0xC6, 0xFE, 0x26, 0x3E, 0xF6, 0x39, 0x9A, 0xD9, 0xE5, 0x91, 0xC4,
            0xF6, 0x32, 0x6B, 0xA5, 0xFA, 0x0B, 0x7B, 0x80, 0x65, 0x3A, 0xCA,
            0xE1, 0x8A, 0x00, 0x23, 0x55, 0x8D, 0xFD, 0xAF, 0xC1, 0x27, 0xCC,
            0xF5, 0x09, 0x66, 0xDA, 0x4F, 0xD0, 0x3B, 0x52, 0xF4, 0xF7, 0x51,
            0x51, 0xE4, 0xBD, 0x5B, 0x93, 0x9E, 0xC3, 0x70, 0x5E, 0x1E, 0xAA,
            0xB3, 0xF3, 0x50, 0x9D, 0x9D, 0x87, 0xFA, 0xEC, 0x3C, 0xD4, 0x67,
            0xE7, 0xA1, 0x39, 0x3B, 0x0F, 0xCD, 0xD9, 0x79, 0x68, 0xCF, 0xCE,
            0x43, 0x7B, 0x76, 0x1E, 0xBA, 0xB3, 0xF3, 0xD0, 0x9D, 0x9D, 0x87,
            0xFE, 0xEC, 0x3C, 0xF4, 0xD9, 0x3C, 0xFC, 0x0A, 0xBD, 0x82, 0x1F,
            0x61, 0x5F, 0x42, 0x49, 0xB8, 0x4C, 0x5B, 0xAC, 0xE7, 0x55, 0x6E,
            0x99, 0x33, 0xDF, 0x72, 0x1D, 0x0E, 0x63, 0xC5, 0xCD, 0x47, 0xC2,
            0x9A, 0x6F, 0x8B, 0x0E, 0x57, 0x5B, 0xD6, 0x46, 0xC0, 0x9A, 0x6F,
            0x5D, 0x0E, 0xD7, 0x58, 0xD6, 0x4E, 0xC0, 0x9A, 0x6F, 0x2F, 0x0E,
            0xD7, 0xCE, 0xAC, 0x74, 0xA2, 0x5A, 0x46, 0x4B, 0x58, 0x3B, 0xCB,
            0x3A, 0x08, 0x58, 0xF3, 0x3E, 0xED, 0x70, 0x79, 0xCF, 0x0D, 0x71,
            0x8E, 0xEF, 0xDB, 0x3C, 0x0F, 0xC7, 0x68, 0xE8, 0x4B, 0x98, 0x47,
            0x98, 0x11, 0xF4, 0x5E, 0x2D, 0x9F, 0x9A, 0x28, 0xE3, 0x79, 0x5E,
            0x17, 0xFF, 0xB8, 0x61, 0xB9, 0xE2, 0x18, 0xC9, 0x14, 0xC6, 0x9D,
            0x90, 0xE5, 0x57, 0xF3, 0x9F, 0xF4, 0xB7, 0xC9, 0xFD, 0x0B, 0xCC,
            0xC5, 0x3F, 0xA8, 0x8F, 0xFA, 0xEA, 0x2A, 0x53, 0x0E, 0x9F, 0x57,
            0xA6, 0x3F, 0xBF, 0xA6, 0x27, 0x7D, 0xB4, 0x9F, 0x50, 0xE2, 0x92,
            0xE9, 0x2C, 0x9D, 0xEA, 0x92, 0xCE, 0x5A, 0xA0, 0xB3, 0x16, 0xEA,
            0xCC, 0xAF, 0xE3, 0x9D, 0xCE, 0x46, 0xA0, 0xB3, 0x11, 0xEA, 0xCC,
            0xAF, 0xE0, 0x9D, 0xCE, 0x56, 0xA0, 0xB3, 0x15, 0xEA, 0xCC, 0xAF,
            0xDD, 0x9D, 0xCE, 0x4E, 0xA0, 0xB3, 0x13, 0xEA, 0xCC, 0xAF, 0xDA,
            0x9D, 0xCE, 0x5E, 0xA0, 0x33, 0xDF, 0xAE, 0x1D, 0x2E, 0xBF, 0x5E,
            0x77, 0x3A, 0x07, 0x81, 0xCE, 0x41, 0xA8, 0x73, 0x14, 0xEA, 0x1C,
            0x05, 0x3A, 0xC7, 0xAC, 0x4E, 0x5C, 0x6D, 0xEF, 0x60, 0x66, 0xCD,
            0x71, 0xF9, 0x18, 0x9E, 0x89, 0xD6, 0x22, 0x17, 0x19, 0x4B, 0x38,
            0x4C, 0x99, 0xC7, 0x3C, 0x89, 0x42, 0xBB, 0x1F, 0xE1, 0xFA, 0x40,
            0x2E, 0xC5, 0x6B, 0x09, 0xD7, 0x43, 0x39, 0x44, 0x8E, 0xA3, 0xB4,
            0x3E, 0x5A, 0x27, 0x85, 0x9A, 0xBE, 0xAA, 0x1D, 0xCC, 0x96, 0x64,
            0x3B, 0x1D, 0x25, 0xB4, 0xE3, 0x7C, 0x53, 0xF8, 0x54, 0xE2, 0x93,
            0x96, 0xFD, 0xA0, 0xF0, 0x59, 0xD8, 0xCF, 0xFA, 0x7F, 0xA3, 0xDD,
            0x78, 0x58, 0x0D, 0xD1, 0x51, 0xDF, 0x45, 0x32, 0x17, 0x30, 0x6E,
            0x6C, 0xA0, 0xBF, 0xAA, 0x21, 0x7E, 0x69, 0x63, 0xF5, 0xBE, 0x81,
            0xCF, 0xD0, 0x55, 0x15, 0xE1, 0x6A, 0x06, 0x57, 0x07, 0xB8, 0x7E,
            0x7E, 0xB2, 0x69, 0x89, 0x6B, 0x2C, 0x0E, 0x9F, 0xE8, 0x68, 0x18,
            0x5C, 0x27, 0xCC, 0x5F, 0x3F, 0xE3, 0xE8, 0x19, 0xE6, 0x25, 0x62,
            0x98, 0x11, 0x2D, 0x9B, 0xA7, 0x71, 0x46, 0x74, 0xAC, 0x96, 0xC9,
            0x22, 0x2A, 0xD6, 0x4E, 0x1B, 0x8B, 0xE1, 0x6C, 0x54, 0x59, 0x6B,
            0x76, 0x6C, 0xB9, 0x2B, 0x6B, 0xC9, 0x31, 0xA3, 0xAB, 0xB1, 0x65,
            0xAA, 0xC0, 0x3A, 0x1C, 0xAE, 0xB5, 0xD6, 0xE1, 0xCA, 0x5E, 0x59,
            0x4B, 0xB7, 0xF0, 0xFC, 0x4E, 0xC7, 0xE2, 0xC8, 0xD2, 0x15, 0xEC,
            0x11, 0xE5, 0x4A, 0x30, 0xD8, 0x12, 0xF4, 0x2C, 0x66, 0xB4, 0x39,
            0xE3, 0x31, 0x93, 0xC5, 0x70, 0xB9, 0xAA, 0xAD, 0xD5, 0xFB, 0xB9,
            0xD7, 0x4C, 0x61, 0x2A, 0x9B, 0x1F, 0xCE, 0x52, 0xB5, 0x67, 0x75,
            0xAE, 0x5C, 0xB5, 0xB5, 0x94, 0xB1, 0x6B, 0xCB, 0xA2, 0xC8, 0x4E,
            0xA5, 0x96, 0x50, 0x5B, 0x1B, 0x0C, 0x19, 0x9D, 0x93, 0xC5, 0x70,
            0x1A, 0x1B, 0x6B, 0x83, 0x81, 0xB5, 0x53, 0x63, 0x6D, 0x30, 0x64,
            0x5A, 0xA6, 0xB3, 0x01, 0xD7, 0x0E, 0x1A, 0xEB, 0x79, 0x55, 0xA6,
            0x76, 0x1B, 0xEB, 0x77, 0x63, 0x46, 0x5B, 0x6F, 0x73, 0xC4, 0xD5,
            0x4A, 0xE3, 0x59, 0x88, 0xD3, 0xD5, 0xDA, 0xD2, 0x57, 0x36, 0xFE,
            0x32, 0x85, 0xAA, 0x3C, 0x14, 0x67, 0xED, 0xD6, 0x5A, 0xA0, 0xB2,
            0x6B, 0xC8, 0x14, 0xAA, 0xF1, 0x50, 0x9C, 0xC5, 0x5B, 0x6B, 0x83,
            0x0A, 0x5A, 0x0C, 0x87, 0xEA, 0x3C, 0x14, 0x67, 0x87, 0xD6, 0x6B,
            0x7B, 0x15, 0xEB, 0xE7, 0xAD, 0x6D, 0x77, 0x9C, 0xCD, 0x5B, 0x6B,
            0xCF, 0x0A, 0x5A, 0x17, 0x87, 0x9A, 0x2C, 0x6A, 0x62, 0x2D, 0xDA,
            0x79, 0x3D, 0x39, 0x8F, 0x69, 0x3D, 0x26, 0xCE, 0xA7, 0x3A, 0xCF,
            0x06, 0x23, 0x5B, 0xBA, 0xCE, 0xDA, 0x20, 0x87, 0x19, 0x2C, 0x13,
            0x57, 0xC7, 0xBD, 0xE7, 0x2F, 0x75, 0x06, 0x45, 0xFE, 0xC2, 0xB7,
            0xF4, 0xDE, 0x7A, 0x0B, 0x8F, 0xF0, 0xFB, 0xE9, 0x96, 0xF5, 0x95,
            0xDE, 0xDA, 0xA9, 0x9D, 0x4F, 0xE8, 0x39, 0x5C, 0x17, 0xE0, 0x38,
            0x7F, 0xE9, 0xAD, 0xAD, 0x10, 0xC7, 0xD9, 0xAB, 0xB7, 0xF6, 0x1A,
            0xD8, 0xB1, 0xA6, 0xB7, 0x3E, 0x83, 0xE3, 0x03, 0xAF, 0xD3, 0x79,
            0x0D, 0x8E, 0x0F, 0x5C, 0x69, 0x07, 0x5B, 0x03, 0x23, 0xF4, 0x96,
            0x5C, 0x1D, 0x0C, 0x5E, 0xBF, 0xCD, 0x59, 0x78, 0xF0, 0xEA, 0xA0,
            0xCA, 0xF4, 0x5B, 0x83, 0xD7, 0x66, 0x7B, 0xB0, 0x30, 0x67, 0x93,
            0xC1, 0xEB, 0xBB, 0xEA, 0x4C, 0xBF, 0x33, 0xD8, 0xBA, 0xE0, 0xE7,
            0x26, 0x43, 0x50, 0x0F, 0xFC, 0x48, 0x37, 0x78, 0x7E, 0x8B, 0xB6,
            0xE3, 0xCB, 0x3B, 0x06, 0xB6, 0xE3, 0x5A, 0xDE, 0x60, 0x6B, 0x63,
            0x64, 0x31, 0xA3, 0xAD, 0x07, 0x9C, 0x45, 0x70, 0x16, 0x19, 0xBD,
            0xBE, 0x13, 0x6D, 0xC7, 0x95, 0x63, 0xF4, 0x46, 0x90, 0x3A, 0x33,
            0x62, 0x8D, 0x51, 0x6D, 0x34, 0x19, 0x64, 0x1B, 0x21, 0x39, 0xAF,
            0x1A, 0xBD, 0x5E, 0xA4, 0x9F, 0x9F, 0x0B, 0xE0, 0x90, 0x7D, 0x84,
            0xE4, 0x7C, 0x7A, 0x8C, 0xEA, 0xA5, 0x61, 0x7D, 0x75, 0xF2, 0x46,
            0x0E, 0x44, 0x72, 0xD6, 0x9C, 0x16, 0x65, 0xE7, 0xFA, 0xE1, 0x29,
            0x2A, 0x7B, 0x9B, 0x99, 0x9D, 0x76, 0x11, 0x92, 0x6B, 0xCD, 0xD3,
            0xA2, 0xEC, 0x9C, 0x77, 0x4C, 0xD6, 0x83, 0xF8, 0x9E, 0xDB, 0xCC,
            0x79, 0x37, 0x01, 0x1F, 0x5F, 0xE7, 0x06, 0xEB, 0x74, 0x4F, 0x6C,
            0x0E, 0x0D, 0xCE, 0x59, 0xBD, 0xCE, 0xE2, 0xDC, 0xEC, 0x80, 0x9F,
            0x71, 0x6F, 0xBC, 0x96, 0xC0, 0xCF, 0x6D, 0xAB, 0xA0, 0x1C, 0x5D,
            0xA6, 0xDD, 0xE3, 0xA8, 0x41, 0x7A, 0xB9, 0x5A, 0xAE, 0x60, 0xDD,
            0xE5, 0x33, 0x6E, 0x32, 0xB3, 0x74, 0xD7, 0x23, 0xF2, 0xF5, 0x51,
            0x79, 0xFD, 0x61, 0x05, 0xBD, 0x66, 0x6E, 0x76, 0x3D, 0x44, 0xFE,
            0xD8, 0x67, 0xEA, 0xC5, 0xF5, 0x8D, 0xE3, 0xBC, 0x7B, 0xCE, 0xCF,
            0xC7, 0xFD, 0xB1, 0x93, 0xF7, 0x8A, 0x29, 0x98, 0x6D, 0x71, 0x7C,
            0xF5, 0x62, 0x4D, 0xC1, 0xF7, 0xA4, 0xB5, 0xB7, 0xAA, 0xA0, 0x12,
            0xE5, 0xB0, 0x63, 0x84, 0xE5, 0xF3, 0xE0, 0x56, 0x07, 0x75, 0x66,
            0x4E, 0x54, 0x7B, 0xB3, 0x6C, 0xEA, 0xA3, 0x79, 0x3B, 0x7D, 0x80,
            0x7F, 0x9C, 0xC5, 0xBB, 0x39, 0xBD, 0x54, 0x8B, 0xB5, 0x65, 0xE2,
            0x7B, 0x13, 0x5C, 0xB7, 0xA0, 0x36, 0xDE, 0x1E, 0x8D, 0xE5, 0xE1,
            0xD7, 0x3F, 0xAD, 0xC5, 0xE4, 0xD7, 0x2B, 0x95, 0x1D, 0xCD, 0x78,
            0xDC, 0xE4, 0xE1, 0xF8, 0x3A, 0x6D, 0x66, 0x6B, 0x12, 0x8E, 0xB3,
            0x67, 0xE3, 0x59, 0xB4, 0xCA, 0xAE, 0x71, 0xEA, 0x00, 0x97, 0x5F,
            0x9D, 0x10, 0x8E, 0xEF, 0x15, 0x70, 0x85, 0xE2, 0xF8, 0xB8, 0xBE,
            0xBF, 0x09, 0xEC, 0x92, 0xEF, 0x8B, 0x42, 0xCD, 0x39, 0xE4, 0x60,
            0x91, 0x75, 0x66, 0x65, 0x40, 0xBD, 0xA0, 0xAB, 0x15, 0xBE, 0x47,
            0xDA, 0x04, 0xF5, 0x92, 0xDB, 0x5D, 0x70, 0x1E, 0x83, 0x25, 0x0A,
            0x3D, 0x19, 0xF7, 0x91, 0xE8, 0x6F, 0xB7, 0xFB, 0x44, 0x29, 0xE6,
            0x54, 0x10, 0xA3, 0x22, 0xCC, 0xA9, 0x0B, 0x46, 0xE0, 0xE3, 0x1B,
            0xA6, 0x1E, 0x14, 0xBE, 0xD1, 0x2E, 0xDE, 0xED, 0x92, 0x48, 0x10,
            0xF7, 0x23, 0xC4, 0x0E, 0xE0, 0xDD, 0x7C, 0x24, 0x69, 0x09, 0x8B,
            0x8C, 0x87, 0xF9, 0xD4, 0x26, 0xDE, 0x3B, 0x5C, 0xDE, 0xF7, 0xF1,
            0x0F, 0xF3, 0x69, 0x8F, 0x89, 0x12, 0xCE, 0xBD, 0xEF, 0x4C, 0x8A,
            0xE6, 0xB8, 0x6F, 0xA1, 0x0C, 0xCB, 0x33, 0xA8, 0x1C, 0x92, 0xE3,
            0x2A, 0xEF, 0x6B, 0xAE, 0x91, 0x71, 0x5A, 0x1E, 0x6C, 0x5C, 0x2A,
            0x9E, 0x0A, 0x6F, 0x55, 0xEA, 0xFD, 0x1F, 0x39, 0xA4, 0xE3, 0x7A,
            0x52, 0xFE, 0xD3, 0xE8, 0x34, 0xC3, 0x20, 0xF9, 0x38, 0x95, 0xE4,
            0x76, 0x73, 0x3C, 0xD1, 0x03, 0xE4, 0xF1, 0x4D, 0xB9, 0xC8, 0xA4,
            0x69, 0x9E, 0xDF, 0x55, 0x70, 0x85, 0x3C, 0x3C, 0x1A, 0xF9, 0xCC,
            0x3B, 0x4E, 0x5E, 0xAD, 0x3E, 0xB7, 0x03, 0x7D, 0x00, 0xFC, 0x57,
            0x85, 0x3B, 0xE6, 0xF4, 0x54, 0x84, 0x0C, 0x8D, 0xCC, 0x8F, 0x50,
            0xDB, 0xE8, 0x05, 0xF4, 0x1E, 0xA6, 0x57, 0x7D, 0xE7, 0x2A, 0xF2,
            0xDC, 0x1C, 0x0E, 0x99, 0xB0, 0x36, 0x4E, 0x90, 0x7B, 0x8C, 0xA7,
            0x3A, 0x80, 0x4D, 0x29, 0x52, 0x08, 0x6D, 0x56, 0x42, 0x2D, 0xB9,
            0x4C, 0x4B, 0xDC, 0xDA, 0x53, 0x81, 0x25, 0x4B, 0x98, 0x9E, 0x92,
            0x37, 0x6D, 0xEC, 0xC4, 0xC8, 0x52, 0xDA, 0x52, 0x8E, 0x6A, 0x00,
            0xDF, 0x48, 0x49, 0xAB, 0xA5, 0x76, 0xC1, 0x11, 0xD6, 0x94, 0x9F,
            0xF2, 0xAC, 0x28, 0x62, 0x3C, 0x97, 0x87, 0x14, 0x8A, 0xB8, 0x76,
            0xD0, 0x03, 0x51, 0x3C, 0xB5, 0x8B, 0xDC, 0x0E, 0xEB, 0x26, 0x87,
            0x0B, 0x99, 0xCA, 0xED, 0xAD, 0x8C, 0x24, 0x46, 0x13, 0x1B, 0xF7,
            0x06, 0x56, 0x37, 0xED, 0xD2, 0xD4, 0x25, 0xF6, 0x90, 0x26, 0x5A,
            0xD4, 0x3D, 0xD7, 0x56, 0xC6, 0x49, 0xF8, 0x6A, 0x21, 0x5F, 0x5D,
            0xE0, 0x0B, 0xFB, 0xD3, 0x3C, 0x86, 0x78, 0x4C, 0xD9, 0xE9, 0x64,
            0xE5, 0xD2, 0x1B, 0x17, 0x76, 0xEA, 0x37, 0xB5, 0x83, 0xD8, 0x4F,
            0x8C, 0xAE, 0x0B, 0xFB, 0x16, 0xB9, 0x5C, 0x5A, 0x8F, 0xA9, 0xCB,
            0x17, 0x60, 0xC3, 0xEB, 0x6F, 0x02, 0x1D, 0x69, 0x19, 0xE2, 0x3F,
            0x16, 0x62, 0x08, 0x52, 0x08, 0x94, 0x75, 0x11, 0x0A, 0xB1, 0x05,
            0x53, 0x29, 0x4E, 0x06, 0x9F, 0x07, 0xB8, 0x52, 0x18, 0x55, 0x77,
            0x03, 0xA3, 0x0C, 0x3D, 0x23, 0x19, 0xEA, 0x2E, 0xA1, 0xCB, 0x9C,
            0xD5, 0x2A, 0xCE, 0x4A, 0xC4, 0x59, 0xAF, 0xE2, 0xAC, 0x33, 0x9C,
            0x38, 0x2F, 0x71, 0xCF, 0xA7, 0x6D, 0x02, 0x0B, 0x96, 0xB1, 0x52,
            0x5E, 0xD7, 0xEE, 0x64, 0x58, 0x29, 0xAF, 0x7B, 0xB3, 0x89, 0x0C,
            0xCB, 0xF1, 0x52, 0x3B, 0xE5, 0x4B, 0xEF, 0x10, 0x1C, 0x87, 0xA9,
            0x8B, 0x27, 0x15, 0xC6, 0xA1, 0xD2, 0x53, 0xBA, 0xBD, 0x7D, 0x6F,
            0x1F, 0xED, 0x6F, 0xAF, 0x91, 0x5F, 0xA7, 0xB1, 0x52, 0x17, 0xF3,
            0x9B, 0x17, 0xBA, 0x79, 0x1E, 0xCD, 0x95, 0x89, 0x97, 0x2F, 0x69,
            0xC4, 0xB1, 0x25, 0x7C, 0xBB, 0x8D, 0x0C, 0x2D, 0x65, 0xAE, 0x56,
            0x31, 0xE7, 0xF3, 0x4C, 0xF3, 0x8C, 0x4D, 0x34, 0x3E, 0x95, 0xB0,
            0x65, 0xC6, 0xF8, 0x89, 0xFA, 0x12, 0xB6, 0xCC, 0x18, 0x3F, 0x59,
            0x5F, 0xC2, 0x96, 0x19, 0x1B, 0x41, 0x6F, 0x91, 0x7A, 0xCE, 0x3E,
            0x87, 0x5A, 0x3E, 0x6B, 0x5F, 0x42, 0x97, 0x39, 0xE3, 0xF5, 0x80,
            0x0C, 0xCB, 0xF1, 0x96, 0x67, 0x14, 0x6B, 0x64, 0x50, 0x0B, 0xA6,
            0x7E, 0x55, 0xB9, 0x27, 0x00, 0x96, 0x18, 0x92, 0x35, 0x2B, 0x99,
            0x3B, 0x85, 0x4F, 0x62, 0xA4, 0x9E, 0x49, 0xF3, 0x6B, 0xBD, 0x8C,
            0x46, 0xD6, 0x23, 0x44, 0xD6, 0xEF, 0xE6, 0x19, 0xF0, 0x95, 0x27,
            0xF7, 0x00, 0xE3, 0xDF, 0xD1, 0x2B, 0xAF, 0x04, 0x9B, 0x62, 0xBD,
            0xD3, 0xDF, 0x84, 0xC4, 0xFD, 0xF7, 0x31, 0xC1, 0x17, 0xA2, 0x52,
            0x3C, 0xE6, 0x59, 0xD4, 0x6B, 0x9D, 0x7A, 0xA7, 0x70, 0x0F, 0x38,
            0xC5, 0xE2, 0x63, 0x88, 0x03, 0xDF, 0xE8, 0x7C, 0x9A, 0x67, 0x26,
            0xFC, 0x5B, 0x13, 0x73, 0x48, 0x9F, 0xEB, 0x15, 0xE6, 0xA1, 0x57,
            0x5A, 0x9F, 0x7B, 0x73, 0x8A, 0x7B, 0x1A, 0x3E, 0xAC, 0x07, 0x99,
            0x44, 0xCC, 0xFE, 0xC5, 0x5B, 0x3D, 0xE7, 0x38, 0x97, 0xB8, 0x98,
            0xE9, 0x5A, 0xDF, 0xA7, 0x77, 0x84, 0xA5, 0x39, 0x7C, 0x04, 0x27,
            0x1D, 0xF7, 0x52, 0x69, 0x04, 0x27, 0x1D, 0xF7, 0x48, 0x69, 0x04,
            0x27, 0xBD, 0xEC, 0x7D, 0xD2, 0x98, 0x58, 0xFE, 0xCE, 0xCE, 0xB1,
            0xEA, 0x48, 0xCA, 0xA5, 0xA4, 0x65, 0xDC, 0x33, 0x02, 0xA9, 0x94,
            0xB4, 0x4C, 0xCD, 0xCA, 0xA4, 0xCA, 0x86, 0x29, 0x0D, 0x2B, 0xC3,
            0x97, 0xC7, 0xBD, 0x43, 0x22, 0x95, 0x12, 0xCB, 0xD0, 0x5C, 0xD9,
            0xBD, 0xA1, 0x9D, 0xF7, 0xA5, 0x34, 0x76, 0xC9, 0x88, 0x2B, 0x43,
            0xB7, 0xBE, 0xB8, 0x0C, 0xD6, 0x7C, 0xB4, 0xDA, 0xE0, 0xB5, 0x48,
            0xE5, 0x63, 0xCD, 0x61, 0xB4, 0x6C, 0x9A, 0x3D, 0x15, 0x51, 0x9B,
            0x4A, 0xE5, 0xFD, 0x39, 0x15, 0x1F, 0x9B, 0x4A, 0xE5, 0x7D, 0x3A,
            0x15, 0xED, 0x9A, 0x4A, 0x8D, 0xDF, 0x5B, 0xC3, 0x61, 0x78, 0x86,
            0x56, 0xC0, 0x90, 0xF2, 0x8A, 0x30, 0x66, 0xB4, 0xC4, 0xD0, 0x65,
            0x19, 0x7A, 0x01, 0x43, 0x9F, 0x60, 0x78, 0x02, 0x0F, 0x33, 0x6F,
            0x18, 0xB8, 0x51, 0x18, 0x3B, 0x8E, 0x23, 0xC0, 0x1E, 0x46, 0xE5,
            0xF8, 0x69, 0xA6, 0x35, 0x72, 0x4B, 0x4D, 0x7B, 0x65, 0x7E, 0xBD,
            0x02, 0xF7, 0xD8, 0xC2, 0x38, 0xF5, 0xC7, 0xAC, 0xA6, 0x92, 0x5C,
            0xAC, 0xC9, 0x5F, 0x33, 0xCA, 0xF5, 0x94, 0xA4, 0x62, 0x2D, 0xC7,
            0x79, 0xEF, 0x0B, 0xDB, 0xE8, 0x0B, 0x8C, 0xBA, 0x69, 0xE6, 0x14,
            0x72, 0xC9, 0x66, 0xE2, 0x60, 0xF1, 0xB7, 0x0E, 0x76, 0x41, 0xAD,
            0x99, 0x7C, 0x6C, 0x61, 0x04, 0xBC, 0xCD, 0x68, 0x90, 0x49, 0xC7,
            0x5A, 0x4F, 0xD0, 0xE2, 0x6F, 0x15, 0xEE, 0xC8, 0xE0, 0x33, 0x2D,
            0xF7, 0xB3, 0x0D, 0x24, 0x7A, 0xE5, 0xF2, 0x6B, 0x34, 0xBB, 0xF7,
            0x43, 0xF8, 0xBF, 0x79, 0xF2, 0x9E, 0x3C, 0x70, 0x4C, 0xF9, 0xDC,
            0x9C, 0xA3, 0xBF, 0xA4, 0xD1, 0xA5, 0xE6, 0x76, 0x4A, 0x78, 0xDC,
            0x92, 0xC7, 0x1F, 0x7F, 0x70, 0xDE, 0x46, 0x5E, 0x6C, 0x76, 0x84,
            0xBE, 0x41, 0x9B, 0xBC, 0x04, 0xCF, 0xD8, 0xC3, 0x0C, 0x38, 0x2C,
            0xC5, 0xFB, 0x79, 0x96, 0x39, 0x09, 0x77, 0x6E, 0x52, 0x29, 0x29,
            0x99, 0xD2, 0xEC, 0x5E, 0x86, 0x26, 0xE6, 0x47, 0x88, 0x02, 0xC6,
            0xE7, 0xB5, 0x6E, 0x95, 0xBF, 0x97, 0xBE, 0x4C, 0x5B, 0xCA, 0xEC,
            0x20, 0xC6, 0x99, 0x93, 0xA2, 0xD4, 0xA5, 0xDC, 0x8D, 0xFA, 0x8D,
            0x95, 0xC2, 0x34, 0x92, 0x89, 0x7B, 0x02, 0xB7, 0xBA, 0x68, 0x61,
            0x1F, 0xB8, 0x83, 0x15, 0x3F, 0xC5, 0xFE, 0xE4, 0xF0, 0xC4, 0x68,
            0x62, 0x9F, 0x0F, 0xF3, 0x8A, 0xDF, 0xF4, 0x55, 0x6F, 0xF3, 0x0E,
            0xEB, 0xC5, 0xFC, 0x5E, 0xCA, 0x8D, 0x8D, 0x5D, 0xC9, 0x61, 0x1D,
            0xDB, 0x13, 0x68, 0xC0, 0x5F, 0x43, 0x89, 0x57, 0x56, 0xB1, 0xF7,
            0x94, 0xD0, 0xC4, 0xFA, 0x06, 0x65, 0xD8, 0x29, 0xFC, 0x35, 0x19,
            0xDA, 0x4D, 0xBC, 0x85, 0x2B, 0xDA, 0x57, 0xA7, 0xD9, 0x94, 0x04,
            0x9B, 0xE7, 0x3D, 0x81, 0xEF, 0x1E, 0xBC, 0x15, 0xA8, 0x04, 0x89,
            0x9C, 0x61, 0x6B, 0x76, 0xBF, 0x78, 0xE3, 0x97, 0x9B, 0xC3, 0xA4,
            0x18, 0x5C, 0xAB, 0xA2, 0x5F, 0xE9, 0x89, 0xDB, 0x7A, 0x19, 0x9F,
            0xE2, 0x2D, 0xB7, 0x1B, 0x29, 0x9E, 0xD8, 0xC9, 0x12, 0xE1, 0x9B,
            0xEE, 0xAF, 0x94, 0x39, 0x2F, 0x30, 0xBE, 0x72, 0xB0, 0x3B, 0x39,
            0x1D, 0x9C, 0x97, 0xB7, 0x10, 0x35, 0x31, 0xCD, 0xBA, 0x64, 0xD2,
            0x72, 0x5D, 0xF4, 0x56, 0xB1, 0x11, 0x62, 0x20, 0x5B, 0x7B, 0x62,
            0x2D, 0x95, 0x95, 0x6B, 0xA2, 0x37, 0x8F, 0xD5, 0xF3, 0x49, 0xF2,
            0xA0, 0x2A, 0x6B, 0x41, 0x99, 0xB4, 0x5C, 0x17, 0xBD, 0x9F, 0xAC,
            0x82, 0x55, 0x73, 0xED, 0xC5, 0x0E, 0x49, 0xA5, 0xE5, 0xBA, 0x3A,
            0xAF, 0x5C, 0xD8, 0xA3, 0x4C, 0xF3, 0x4A, 0x5D, 0x2A, 0x9D, 0xD7,
            0x65, 0x70, 0x4F, 0xEF, 0xF0, 0x09, 0x27, 0x27, 0xE1, 0x47, 0x3F,
            0xE8, 0xE6, 0x78, 0x80, 0xDA, 0x46, 0xE0, 0x97, 0xA5, 0x24, 0xEC,
            0x54, 0xF7, 0xCD, 0xFC, 0x44, 0x66, 0x65, 0x23, 0x41, 0xCA, 0x72,
            0x12, 0x7E, 0xAA, 0xEF, 0x8D, 0xC2, 0xDF, 0xAE, 0x68, 0x6C, 0x64,
            0x6D, 0x59, 0x4E, 0xC2, 0xDF, 0x59, 0xEB, 0x4F, 0x10, 0xD9, 0x58,
            0xC3, 0xBF, 0x32, 0x3F, 0x57, 0xBB, 0x2F, 0xEA, 0x38, 0xD7, 0x3F,
            0xEF, 0x19, 0xA8, 0x11, 0x6D, 0x85, 0x96, 0xEB, 0x6C, 0xAC, 0xC6,
            0x7B, 0xD8, 0xD6, 0xE4, 0x03, 0x73, 0xEF, 0x72, 0xD0, 0x83, 0x57,
            0xE3, 0x33, 0x35, 0xA9, 0xFE, 0xA1, 0xC4, 0xB3, 0xD4, 0xED, 0xF6,
            0x23, 0xAB, 0x05, 0x5F, 0xBC, 0x57, 0x69, 0x76, 0x7B, 0xF0, 0x79,
            0x70, 0xFE, 0xED, 0x15, 0xD4, 0x93, 0x94, 0x91, 0xC4, 0xF9, 0x08,
            0xCF, 0xCA, 0xBD, 0xC1, 0xA8, 0x52, 0x7A, 0x33, 0x47, 0x88, 0xF6,
            0x39, 0x68, 0x64, 0xC7, 0x37, 0xE3, 0x1C, 0x60, 0x4D, 0x40, 0x67,
            0x77, 0xCB, 0x11, 0xA8, 0x84, 0x4F, 0xF1, 0xDE, 0xC1, 0x0E, 0xDF,
            0x0E, 0xCA, 0x81, 0x56, 0x5A, 0xFE, 0x7A, 0xA0, 0x44, 0x22, 0xC5,
            0xFD, 0x3A, 0x8F, 0x51, 0x77, 0xCA, 0x9D, 0x37, 0xD2, 0x1E, 0xA0,
            0xF1, 0x1F, 0x63, 0xCD, 0xA3, 0x67, 0xDD, 0xF7, 0xC8, 0x4A, 0xF5,
            0xBA, 0xB8, 0x84, 0xF5, 0x7A, 0x53, 0xB2, 0xA4, 0x17, 0xDF, 0x07,
            0x62, 0x50, 0xF7, 0x76, 0x66, 0x62, 0x4E, 0x6E, 0x31, 0x06, 0xC8,
            0xA4, 0x5C, 0x2F, 0xE6, 0x1D, 0x32, 0x19, 0x5F, 0x43, 0x38, 0xE2,
            0xE3, 0x19, 0xEE, 0xD6, 0x3B, 0x71, 0x71, 0x65, 0x91, 0xA1, 0x7D,
            0x6E, 0xD9, 0x73, 0x83, 0x12, 0x2C, 0xB1, 0x62, 0x4C, 0xC1, 0xF3,
            0xBC, 0x72, 0xC4, 0x67, 0xB9, 0x30, 0x96, 0x1F, 0x23, 0xBF, 0x5B,
            0xDB, 0xFB, 0xC7, 0x48, 0x62, 0x30, 0x11, 0x23, 0xB4, 0x12, 0xFC,
            0x02, 0x11, 0x2F, 0xF8, 0x9E, 0x06, 0x53, 0x1F, 0xB8, 0x3F, 0x7D,
            0x12, 0xB4, 0x2A, 0x09, 0x4B, 0x59, 0xA7, 0xC9, 0xE1, 0x57, 0x28,
            0xE5, 0xFB, 0x35, 0x3A, 0x8E, 0x94, 0xBE, 0x70, 0xCF, 0x9D, 0x56,
            0xFD, 0x6B, 0xB4, 0xA5, 0x19, 0x48, 0x97, 0x99, 0xCF, 0x23, 0x66,
            0x3B, 0xF7, 0x5E, 0x37, 0x90, 0x3F, 0xDA, 0x13, 0x71, 0x2B, 0x9E,
            0x12, 0x32, 0xE4, 0x73, 0xAB, 0xA3, 0xE5, 0x5C, 0x3D, 0x8F, 0x41,
            0x9E, 0x57, 0xD8, 0x79, 0xCA, 0xAD, 0xA0, 0x53, 0x08, 0x92, 0xF5,
            0xDF, 0xA4, 0xE9, 0xCE, 0x1D, 0xDD, 0x89, 0x79, 0x0E, 0x91, 0xE7,
            0xA8, 0x8A, 0x1C, 0x55, 0x81, 0xA3, 0x29, 0x30, 0x34, 0x05, 0xF9,
            0xB6, 0x20, 0xDF, 0x16, 0xE4, 0xBB, 0x82, 0x7C, 0x57, 0x90, 0xEF,
            0x0B, 0xF2, 0x7D, 0x41, 0x7E, 0x28, 0xC8, 0x0F, 0x05, 0xF9, 0xB1,
            0x20, 0x3F, 0x16, 0xE4, 0xA7, 0x82, 0xFC, 0xE4, 0xC9, 0xE3, 0xB3,
            0xE4, 0x57, 0x0A, 0x7F, 0x3D, 0xE6, 0x51, 0xE1, 0xBA, 0x3A, 0xFF,
            0xC6, 0xAB, 0xB5, 0x52, 0xA8, 0xEB, 0x77, 0xE8, 0xE9, 0xAF, 0xB5,
            0x8F, 0x57, 0x73, 0xAB, 0xAB, 0x21, 0x2A, 0x80, 0x9E, 0xDB, 0x0C,
            0xD3, 0x97, 0x32, 0x5B, 0x85, 0x4F, 0xF0, 0x55, 0x73, 0x8C, 0x70,
            0x0B, 0xB3, 0xB6, 0x69, 0x9E, 0x33, 0xC5, 0xC8, 0x58, 0xDE, 0x9D,
            0xA9, 0x84, 0xF7, 0x96, 0xB8, 0x6D, 0x12, 0x99, 0xE2, 0x6C, 0x12,
            0xC8, 0x26, 0x81, 0x6B, 0x13, 0xB8, 0x36, 0xC2, 0xED, 0x6D, 0xC9,
            0x7D, 0xE4, 0x3E, 0x69, 0x0F, 0xBA, 0x7B, 0x09, 0x23, 0x65, 0x0A,
            0x7F, 0xE9, 0x8D, 0xA1, 0x7E, 0x8A, 0x79, 0xAF, 0xDC, 0x86, 0xD1,
            0xE2, 0xD2, 0x42, 0xB9, 0x54, 0xAE, 0x52, 0x79, 0x22, 0xCB, 0x2F,
            0x91, 0xB1, 0xED, 0xF0, 0xEE, 0x55, 0x12, 0x7B, 0x95, 0xC0, 0xC6,
            0x75, 0xB7, 0x4F, 0xD4, 0xDD, 0x3E, 0x59, 0x77, 0xFB, 0x64, 0xDD,
            0xED, 0x13, 0x75, 0xB7, 0x4F, 0xD4, 0xDD, 0x3E, 0x51, 0x77, 0xFB,
            0x44, 0xDD, 0xBD, 0xD8, 0x5D, 0x1D, 0x7A, 0xA7, 0x52, 0x28, 0x93,
            0x4A, 0x47, 0xF9, 0x1F, 0x82, 0x96, 0x42, 0xF7, 0x95, 0xFA, 0x1F,
            0xD4, 0x89, 0x20, 0x4A,
        ];
        let keybinds = [
            0xF4, 0x05, 0x00, 0x00, 0x78, 0x9C, 0x95, 0x54, 0xD1, 0x4E, 0xC2,
            0x40, 0x10, 0x1C, 0x5F, 0x4D, 0xFC, 0x87, 0xC6, 0x77, 0x85, 0xBB,
            0x5E, 0x4B, 0x49, 0x10, 0x22, 0x31, 0x7E, 0x81, 0x3E, 0x1B, 0x41,
            0xA3, 0x46, 0x04, 0x05, 0x35, 0x7C, 0xA4, 0x1F, 0xE5, 0xF4, 0x6A,
            0xE9, 0x6E, 0xBB, 0x90, 0x98, 0x4B, 0xDA, 0xDE, 0xEE, 0xDC, 0xEC,
            0xEC, 0xEE, 0x6D, 0x7F, 0x70, 0x84, 0x11, 0x26, 0xD8, 0xE2, 0x0D,
            0x0B, 0x24, 0xF8, 0xC6, 0x23, 0xD6, 0xD8, 0xE0, 0x05, 0x2B, 0x2C,
            0x71, 0x81, 0x53, 0x38, 0x9C, 0xA3, 0xCF, 0x77, 0x42, 0xCF, 0x12,
            0x73, 0xDA, 0x1F, 0xE8, 0x5D, 0xE2, 0x29, 0x7A, 0x6F, 0x71, 0x83,
            0x6B, 0x9C, 0x11, 0x95, 0x73, 0x37, 0xC1, 0x18, 0x27, 0x38, 0x26,
            0xE3, 0x0A, 0xEF, 0xF8, 0xFC, 0x63, 0xD9, 0xEC, 0xAC, 0x73, 0x3C,
            0xE3, 0x3E, 0x9E, 0xDE, 0xE0, 0x95, 0xEF, 0x05, 0xD7, 0x98, 0x27,
            0x33, 0x46, 0x90, 0x2B, 0x6D, 0xED, 0x9D, 0xDA, 0x15, 0x2D, 0x6F,
            0x7B, 0x79, 0x4C, 0xE3, 0xB3, 0x61, 0x0B, 0x8A, 0x73, 0x8A, 0x2B,
            0x3E, 0x07, 0xEA, 0x44, 0x9B, 0xC1, 0x66, 0x76, 0xA6, 0x35, 0xC5,
            0x50, 0xF1, 0x5F, 0x46, 0x5C, 0xAA, 0x10, 0x87, 0xF4, 0x56, 0xFA,
            0xF6, 0xC5, 0x2C, 0xFD, 0x85, 0xF2, 0x07, 0x56, 0x4C, 0x72, 0x06,
            0x46, 0x3C, 0x14, 0x63, 0x84, 0xDE, 0x9E, 0xCA, 0x57, 0x5D, 0xF9,
            0xC0, 0x17, 0x2D, 0x73, 0xDA, 0x67, 0xC4, 0xAC, 0x71, 0xA7, 0xBA,
            0x77, 0xC7, 0xBE, 0x6F, 0x05, 0x76, 0xC6, 0xEF, 0x3E, 0x6F, 0x83,
            0x67, 0x96, 0x09, 0x3B, 0x97, 0xF1, 0xAB, 0x8C, 0x50, 0x79, 0x6A,
            0x84, 0xDB, 0x21, 0x8A, 0x58, 0xEB, 0x2E, 0x22, 0x15, 0x1C, 0xE5,
            0x0D, 0xE8, 0x22, 0x82, 0x8A, 0x62, 0x21, 0x86, 0x02, 0x51, 0x77,
            0xC8, 0xD2, 0xD2, 0xA8, 0x71, 0x51, 0x8F, 0x8D, 0xF2, 0x1D, 0x36,
            0x3B, 0xB3, 0x20, 0x72, 0x4B, 0xB9, 0x2C, 0x4C, 0x2E, 0xB8, 0x06,
            0x26, 0x8F, 0x17, 0x55, 0x2C, 0xE2, 0x09, 0x0B, 0xD3, 0x28, 0x2F,
            0xEF, 0x98, 0x55, 0x03, 0x4F, 0xAB, 0xCE, 0x2E, 0x98, 0xA8, 0x5C,
            0xA1, 0xBC, 0xD2, 0x2D, 0x7B, 0xEB, 0xA9, 0x57, 0xD6, 0x7D, 0x68,
            0xF6, 0xAE, 0xAF, 0xF2, 0xB3, 0xFB, 0xEB, 0x54, 0x9D, 0x6C, 0x9E,
            0x20, 0xF2, 0x73, 0x66, 0x9D, 0x52, 0x91, 0x5F, 0xB6, 0xBB, 0xF1,
            0x16, 0x2E, 0x8F, 0xB9, 0x25, 0xB1, 0x96, 0x41, 0xCC, 0xB1, 0xD5,
            0xA1, 0x72, 0xA6, 0x1A, 0xB4, 0x9C, 0x3D, 0x4B, 0x43, 0x88, 0xF9,
            0x76, 0xD1, 0x85, 0x99, 0x79, 0x88, 0x8A, 0x6B, 0x74, 0x3D, 0xC3,
            0x59, 0xAC, 0x94, 0x85, 0xCE, 0x3B, 0xE8, 0xAE, 0x92, 0xAA, 0x43,
            0xBD, 0x7F, 0xCD, 0x6A, 0xCF, 0xFC, 0x0B, 0x03, 0xBF, 0x9D, 0x7E,
            0xBB, 0x81,
        ];

        tx.send(session.send(Message::CurStatus(self))).unwrap();

        let game_time = 148641933;
        vec![
            s::Message::LoadClientSettings(s::LoadClientSettings::new(
                0,
                ui.to_vec(),
            )),
            s::Message::LoadClientSettings(s::LoadClientSettings::new(
                1,
                keybinds.to_vec(),
            )),
            s::Message::LoadItemCooltime(s::LoadItemCooltime::new()),
            s::Message::ChangeChannel(s::ChangeChannel::new(
                change_channel.to_vec(),
            )),
            s::Message::Weather(s::Weather::new()),
            s::Message::Time(s::Time::new(game_time)),
            s::Message::GamepassInfo(s::GamepassInfo::new(
                [
                    0x01, 0x00, 0x00, 0x00, 0x10, 0x3B, 0x64, 0x99, 0xFF, 0xFF,
                    0xFF, 0xFF, 0x10, 0x3B, 0x64, 0x99, 0xFF, 0xFF, 0xFF, 0xFF,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ]
                .to_vec(),
            )),
            s::Message::GamepassInfo(s::GamepassInfo::new(
                [
                    0x01, 0x00, 0x00, 0x00, 0x10, 0x3B, 0x64, 0x99, 0xFF, 0xFF,
                    0xFF, 0xFF, 0x10, 0x3B, 0x64, 0x99, 0xFF, 0xFF, 0xFF, 0xFF,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ]
                .to_vec(),
            )),
            s::Message::GamepassInfo(s::GamepassInfo::new(
                [
                    0x02, 0x00, 0x00, 0x00, 0x10, 0x3B, 0x64, 0x99, 0xFF, 0xFF,
                    0xFF, 0xFF, 0x10, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ]
                .to_vec(),
            )),
        ]
    }
}
impl Deserialise for CurStatus {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}

#[derive(Debug, Clone)]
pub struct ReadyToQuit;

impl ReadyToQuit {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![]
    }
}
impl Deserialise for ReadyToQuit {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}

#[derive(Debug, Clone)]
pub struct AskQuit;

impl AskQuit {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![s::Message::AskQuitResult(s::AskQuitResult::new())]
    }
}
impl Deserialise for AskQuit {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}

#[derive(Debug, Clone)]
pub struct _00D8;
impl _00D8 {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![s::Message::_0102(s::_0102::new())]
    }
}
impl Deserialise for _00D8 {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}

#[derive(Debug, Clone)]
pub struct RecipeList;
impl RecipeList {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![s::Message::RecipeList(s::RecipeList::new(
            [
                0x03, 0x00, 0x49, 0x30, 0x3D, 0x09, 0x00, 0x4A, 0x30, 0x3D,
                0x09, 0x00, 0x4D, 0x30, 0x3D, 0x09, 0x00,
            ]
            .to_vec(),
        ))]
    }
}
impl Deserialise for RecipeList {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}

#[derive(Debug, Clone)]
pub struct QueryBuddy;
impl QueryBuddy {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![s::Message::BuddyList(s::BuddyList::new())]
    }
}
impl Deserialise for QueryBuddy {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}

#[derive(Debug, Clone)]
pub struct QueryBlock;
impl QueryBlock {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![]
    }
}
impl Deserialise for QueryBlock {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}

#[derive(Debug, Clone)]
enum MoveData {
    Stop,
    Continue {
        time: u32,
    },
    Turn {
        delta: Coord,
        time: u32,
    },
    Direct {
        dest: Coord,
        time: u32,
    },
    GlideTurn {
        delta: Coord,
        unknown: u8,
        time: u32,
    },
    GlideContinue {
        unknown: u8,
        time: u32,
    },
}

#[derive(Debug, Clone)]
pub struct MoveNew {
    coord: Coord,
    direction: Direction,
    ty: MoveType,
    data: MoveData,
}
impl MoveNew {
    pub fn handle(
        self,
        tx: &Sender<ClientUpdate>,
        session: &mut Account,
    ) -> Vec<s::Message> {
        tx.send(session.send(Message::MoveNew(self))).unwrap();
        vec![]
    }

    pub fn location(&self) -> Coord {
        self.coord
    }

    pub fn calculate(&self, entity_id: u32) -> s::MoveNew {
        match self.data {
            MoveData::Continue { .. } => s::MoveNew::new(
                entity_id,
                self.coord.clone(),
                self.direction.clone(),
                self.ty.clone(),
                s::MoveData::Continue,
            ),
            MoveData::Turn { delta, .. } => s::MoveNew::new(
                entity_id,
                self.coord.clone(),
                self.direction.clone(),
                self.ty.clone(),
                s::MoveData::Turn {
                    delta: delta.clone(),
                },
            ),
            MoveData::Stop => s::MoveNew::new(
                entity_id,
                self.coord.clone(),
                self.direction.clone(),
                self.ty.clone(),
                s::MoveData::Stop,
            ),
            MoveData::Direct { dest, .. } => s::MoveNew::new(
                entity_id,
                self.coord.clone(),
                self.direction.clone(),
                self.ty.clone(),
                s::MoveData::Direct { dest: dest.clone() },
            ),
            MoveData::GlideTurn { delta, .. } => s::MoveNew::new(
                entity_id,
                self.coord.clone(),
                self.direction.clone(),
                self.ty.clone(),
                s::MoveData::Turn {
                    delta: delta.clone(),
                },
            ),
            MoveData::GlideContinue { .. } => s::MoveNew::new(
                entity_id,
                self.coord.clone(),
                self.direction.clone(),
                self.ty.clone(),
                s::MoveData::Continue,
            ),
        }
    }
}
impl Deserialise for MoveNew {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        let mut _len = 0;
        let coord = Coord::deserialise(&buf[..12].try_into().unwrap());
        _len += Coord::LEN;

        let direction = Direction::new(consume_le_bytes!(_len, buf, u8));

        let ty: MoveType = consume_le_bytes!(_len, buf, u8).into();

        let data = if ty.contains(MoveType::FALL) {
            MoveData::Continue {
                time: consume_le_bytes!(_len, buf, u32),
            }
        } else if ty.contains(MoveType::TURN) {
            let delta = Coord::new(
                consume_le_bytes!(_len, buf, f32),
                consume_le_bytes!(_len, buf, f32),
                consume_le_bytes!(_len, buf, f32),
            );
            if ty.contains(MoveType::GLIDE) {
                MoveData::GlideTurn {
                    delta,
                    unknown: consume_le_bytes!(_len, buf, u8),
                    time: consume_le_bytes!(_len, buf, u32),
                }
            } else {
                MoveData::Turn {
                    delta,
                    time: consume_le_bytes!(_len, buf, u32),
                }
            }
        } else if ty.contains(MoveType::CONTINUE) {
            if ty.contains(MoveType::GLIDE) {
                MoveData::GlideContinue {
                    unknown: consume_le_bytes!(_len, buf, u8),
                    time: consume_le_bytes!(_len, buf, u32),
                }
            } else {
                MoveData::Continue {
                    time: consume_le_bytes!(_len, buf, u32),
                }
            }
        } else {
            MoveData::Stop
        };

        Self {
            coord,
            direction,
            ty,
            data,
        }
    }
}
#[derive(Debug, Clone)]
pub struct RequestSerialKillerList;
impl RequestSerialKillerList {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![]
    }
}
impl Deserialise for RequestSerialKillerList {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}
#[derive(Debug, Clone)]
pub struct InstanceDungeonCooltimes;
impl InstanceDungeonCooltimes {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![]
    }
}
impl Deserialise for InstanceDungeonCooltimes {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}
#[derive(Debug, Clone)]
pub struct SignClient {
    unknown: [u8; 10],
}
impl SignClient {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![
        //s::Message::SignClient(s::SignClient::new())
        ]
    }
}
impl Deserialise for SignClient {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self {
            unknown: buf.try_into().unwrap(),
        }
    }
}

/// TODO: Most likely compressed or encoded
#[derive(Debug, Clone)]
pub struct SaveClientSettings {
    ty: u8,
    raw: Vec<u8>,
}
impl SaveClientSettings {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![]
    }
}
impl Deserialise for SaveClientSettings {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        let mut _len = 0;
        let ty = consume_le_bytes!(_len, buf, u8);
        _ = consume_le_bytes!(_len, buf, u16);
        let body_len = consume_le_bytes!(_len, buf, u16) as usize;
        Self {
            ty,
            raw: buf[_len..body_len].to_vec(),
        }
    }
}
#[derive(Debug, Clone)]
pub struct RouteInfo;
impl RouteInfo {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![]
    }
}
impl Deserialise for RouteInfo {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}

#[derive(Debug, Clone)]
pub struct ReadyEnterWorldAck {
    unknown: [u8; 4],
}
impl ReadyEnterWorldAck {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![]
    }
}
impl Deserialise for ReadyEnterWorldAck {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self {
            unknown: buf.try_into().unwrap(),
        }
    }
}

#[derive(Debug, Clone)]
pub struct AskLog;
impl AskLog {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![]
    }
}
impl Deserialise for AskLog {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}

/// The world has been drawn by the client and its ready for objects
/// to be placed. Order matters, before put_NPC you cannot reference its ID in
/// game. Npcs must be placed afterwards
#[derive(Debug, Clone)]
pub struct LevelReady;
impl LevelReady {
    pub fn handle(
        self,
        tx: &Sender<ClientUpdate>,
        session: &mut Account,
    ) -> Vec<s::Message> {
        tx.send(session.send(Message::LevelReady(self))).unwrap();

        vec![s::Message::InvincibleTime(s::InvincibleTime::finish())]
    }
}
impl Deserialise for LevelReady {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}
#[derive(Debug, Clone)]
pub struct UseSkill {
    pub skill_id: u16,
    pub skill_level: u16,
    pub target_id: u32,
    unknown: Vec<u8>,
}
impl UseSkill {
    pub fn handle(
        self,
        tx: &Sender<ClientUpdate>,
        session: &mut Account,
    ) -> Vec<s::Message> {
        tx.send(session.send(Message::UseSkill(self))).unwrap();

        vec![]
    }
}
impl Deserialise for UseSkill {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        let mut ptr = 0;

        let id = consume_le_bytes!(ptr, buf, u16);
        let level = consume_le_bytes!(ptr, buf, u16);
        let target_id = consume_le_bytes!(ptr, buf, u32);
        let unknown = buf[ptr..].to_vec();

        Self {
            skill_id: id,
            skill_level: level,
            target_id,
            unknown,
        }
    }
}

#[derive(Debug, Clone)]
pub struct Action {
    pub ty: ActionType,
    raw: Vec<u8>,
}
impl Action {
    pub fn handle(
        self,
        tx: &Sender<ClientUpdate>,
        session: &mut Account,
    ) -> Vec<s::Message> {
        tx.send(session.send(Message::Action(self))).unwrap();

        vec![]
    }
}
impl Deserialise for Action {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self {
            ty: ActionType::deserialise(buf),
            raw: buf.to_vec(),
        }
    }
}

#[derive(Debug, Clone)]
#[repr(u8)]
pub enum LootAction {
    Start = 0,
    Stop = 1,
}

impl From<u8> for LootAction {
    fn from(value: u8) -> Self {
        match value {
            0 => Self::Start,
            1 => Self::Stop,
            _ => unreachable!("Invalid LootAction"),
        }
    }
}

#[derive(Debug, Clone)]
pub struct Loot {
    pub entity_id: u32,
    pub action: LootAction,
}
impl Loot {
    pub fn handle(
        self,
        tx: &Sender<ClientUpdate>,
        session: &mut Account,
    ) -> Vec<s::Message> {
        tx.send(session.send(Message::Loot(self))).unwrap();

        vec![]
    }
}

impl Deserialise for Loot {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        let mut _len = 0;
        let entity_id = consume_le_bytes!(_len, buf, u32);
        let action = consume_le_bytes!(_len, buf, u8).into();
        Self { entity_id, action }
    }
}

#[derive(Debug, Clone)]
pub struct LootItem {
    pub entity_id: u32,
    pub index: u32,
}
impl LootItem {
    pub fn handle(
        self,
        tx: &Sender<ClientUpdate>,
        session: &mut Account,
    ) -> Vec<s::Message> {
        tx.send(session.send(Message::LootItem(self))).unwrap();

        vec![]
    }
}

impl Deserialise for LootItem {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        let mut _len = 0;
        let entity_id = consume_le_bytes!(_len, buf, u32);
        let index = consume_le_bytes!(_len, buf, u32);
        Self { entity_id, index }
    }
}

#[derive(Debug, Clone)]
pub struct ChangeTarget {
    pub target_id: u32,
}
impl ChangeTarget {
    pub fn handle(
        self,
        tx: &Sender<ClientUpdate>,
        account: &mut Account,
    ) -> Vec<s::Message> {
        tx.send(account.send(Message::ChangeTarget(self))).unwrap();

        vec![]
    }
}
impl Deserialise for ChangeTarget {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        let mut _len = 0;
        let target_id = consume_le_bytes!(_len, buf, u32);

        Self { target_id }
    }
}

/// When an attack is recieved from a client it just tells us who it is attacking
/// and what the attack sequence number is, we send this update to the main game
/// loop for damage calculations
#[derive(Debug, Clone)]
pub struct Attack {
    pub target_id: u32,
    sequence: u8,
    _unknown: Vec<u8>,
}
impl Attack {
    pub fn handle(
        self,
        tx: &Sender<ClientUpdate>,
        session: &mut Account,
    ) -> Vec<s::Message> {
        tx.send(session.send(Message::Attack(self))).unwrap();
        vec![]
    }
}
impl Deserialise for Attack {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        let mut ptr = 0;

        let target_id = consume_le_bytes!(ptr, buf, u32);
        let sequence = consume_le_bytes!(ptr, buf, u8);

        let _unknown = buf[ptr..].to_vec();

        Self {
            target_id,
            sequence,
            _unknown,
        }
    }
}
#[derive(Debug, Clone)]
pub struct UseEquipmentItem {
    unknown: [u8; 9],
}
impl UseEquipmentItem {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![]
    }
}
impl Deserialise for UseEquipmentItem {
    fn deserialise(buf: &[u8]) -> Self
    where
        Self: Sized,
    {
        let unknown = buf.try_into().unwrap();

        Self { unknown }
    }
}
#[derive(Debug, Clone)]
pub struct ReconnectAuth;
impl ReconnectAuth {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![s::Message::ReconnectKey(s::ReconnectKey::new())]
    }
}
impl Deserialise for ReconnectAuth {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}

#[derive(Debug, Clone)]
pub struct Alive;
impl Alive {
    pub fn handle(
        &self,
        _: &Sender<ClientUpdate>,
        _: &mut Account,
    ) -> Vec<s::Message> {
        vec![s::Message::Alive(s::Alive::new())]
    }
}
impl Deserialise for Alive {
    fn deserialise(_: &[u8]) -> Self
    where
        Self: Sized,
    {
        Self
    }
}
